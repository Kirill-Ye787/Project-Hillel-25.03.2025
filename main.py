# –£—Å—Ç–∞–Ω–æ–≤–∏ —Å–Ω–∞—á–∞–ª–∞ geopy —á–µ—Ä–µ–∑: pip install geopy

from geopy.distance import geodesic
from math import atan2, radians, degrees, sin, cos

# –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—Ä–∞–±–ª—è –∏–ª–∏ –º–∞—à–∏–Ω—ã)
current_position = (54.321, 10.123)  # –ü—Ä–∏–º–µ—Ä: –ö–∏–ª—å, –ì–µ—Ä–º–∞–Ω–∏—è

# –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è)
destination_position = (55.675, 12.565)  # –ü—Ä–∏–º–µ—Ä: –ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω, –î–∞–Ω–∏—è

# –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
distance = geodesic(current_position, destination_position).kilometers

# –†–∞—Å—á—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∞–∑–∏–º—É—Ç–∞)
def get_bearing(start, end):
    lat1, lon1 = map(radians, start)
    lat2, lon2 = map(radians, end)
    d_lon = lon2 - lon1

    x = sin(d_lon) * cos(lat2)
    y = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(d_lon)
    angle = atan2(x, y)
    bearing = (degrees(angle) + 360) % 360
    return bearing

bearing = get_bearing(current_position, destination_position)

# –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
print(f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏: {distance:.2f} –∫–º")
print(f"üß≠ –ê–∑–∏–º—É—Ç (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ): {bearing:.1f}¬∞")



try:
    # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
    result = 10 / 2
except ZeroDivisionError:
    # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
    print("Error: Division by zero")
else:
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏–Ω—è—Ç–∫—É –Ω–µ –≤–∏–Ω–∏–∫–∞—î
    print("Division successful")
finally:
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
    print("End of try-except block")

    try:
        # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
        result = int("123")
    except ValueError as e:
        # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
        print(f"Error: {e}")
    else:
        # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏–Ω—è—Ç–∫—É –Ω–µ –≤–∏–Ω–∏–∫–∞—î
        print("Conversion successful")

        try:
            # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
            result = int("123")
        except ValueError as e:
            # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
            print(f"Error: {e}")
        finally:
            # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
            print("End of try block")

try:
    # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
    result = int("123")
except ValueError as e:
    # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
    print(f"Error: {e}")
finally:
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
    print("End of try block")

    try:
        # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
        result = 10 / 0
    except ZeroDivisionError:
        # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
        print("Error: Division by zero")

try:
    # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
    result = int("123")
except ValueError as e:
    # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
    print(f"Error: {e}")
finally:
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
    print("End of try block")

try:
    # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
    result = int("123")
except ValueError as e:
    # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
    print(f"Error: {e}")
else:
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏–Ω—è—Ç–∫—É –Ω–µ –≤–∏–Ω–∏–∫–∞—î
    print("Conversion successful")

try:
    # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
    result = 10 / 2
except ZeroDivisionError:
    # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
    print("Error: Division by zero")
else:
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏–Ω—è—Ç–∫—É –Ω–µ –≤–∏–Ω–∏–∫–∞—î
    print("Division successful")
finally:
    # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
    print("End of try-except block")

    try:
        # –ö–æ–¥, —è–∫–∏–π –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫
        result = 10 / 2
    except ZeroDivisionError:
        # –ö–æ–¥ –æ–±—Ä–æ–±–∫–∏ –≤–∏–Ω—è—Ç–∫—É
        print("Error: Division by zero")
    else:
        # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —è–∫—â–æ –≤–∏–Ω—è—Ç–∫—É –Ω–µ –≤–∏–Ω–∏–∫–∞—î
        print("Division successful")
    finally:
        # –ö–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
        print("End of try-except block")

class CustomError(Exception):
    pass

try:
    raise CustomError("This is a custom exception.")
except CustomError as ce:
    print(f"Custom error caught: {ce}")


# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫
my_string_1 = 'I like Python'
my_string_2 = "I like Python"
# –í–∏–≤–æ–¥–∏–º–æ —Ç–∏–ø
print(type(my_string_1)) # –≤–∏–≤–µ–¥–µ: <class 'str'>

# –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –æ–¥–∏–Ω–∞—Ä–Ω—ñ –ª–∞–ø–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ä—è–¥–∫–∞
my_string_1 = "I 'like' Python"
print(my_string_1) # –≤–∏–≤–µ–¥–µ: I 'like' Python

# –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ä—è–¥–∫–∞
my_string_1 = 'I "like" Python'
print(my_string_1) # –≤–∏–≤–µ–¥–µ: I "like" Python

# –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–ª–µ—à–∞, –º–æ–∂–Ω–∞ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ –ª–∞–ø–∫–∏
my_string_1 = "I \"like\" Python"
print(my_string_1) # –≤–∏–≤–µ–¥–µ: I "like" Python

# –ü–æ—Ç—Ä—ñ–π–Ω—ñ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–æ–¥—ñ, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ–∑ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è–º —Ä—è–¥–∫—ñ–≤
my_string = """Python
""is""
awesome
"""

digits = str(3654)
# –í–∏–≥–ª—è–¥–∞—î —è–∫ —á–∏—Å–ª–æ, –∞–ª–µ —Ü–µ —Ä—è–¥–æ–∫
print(digits) # –≤–∏–≤–µ–¥–µ: 3654
print(type(digits)) # –≤–∏–≤–µ–¥–µ: <class 'str'>

digits = int(digits)
print(type(digits)) # –≤–∏–≤–µ–¥–µ: <class 'int'>


